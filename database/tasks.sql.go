// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.25.0
// source: tasks.sql

package database

import (
	"context"
	"database/sql"
)

const createTask = `-- name: CreateTask :exec
INSERT INTO tasks (title, description, completed) VALUES ($1, $2, $3)
`

type CreateTaskParams struct {
	Title       string         `json:"title"`
	Description sql.NullString `json:"description"`
	Completed   sql.NullBool   `json:"completed"`
}

func (q *Queries) CreateTask(ctx context.Context, arg CreateTaskParams) error {
	_, err := q.db.ExecContext(ctx, createTask, arg.Title, arg.Description, arg.Completed)
	return err
}

const deleteTask = `-- name: DeleteTask :exec
DELETE FROM tasks WHERE id = $1
`

func (q *Queries) DeleteTask(ctx context.Context, id int32) error {
	_, err := q.db.ExecContext(ctx, deleteTask, id)
	return err
}

const getTask = `-- name: GetTask :one
SELECT id, title, description, completed FROM tasks WHERE id = $1
`

type GetTaskRow struct {
	ID          int32          `json:"id"`
	Title       string         `json:"title"`
	Description sql.NullString `json:"description"`
	Completed   sql.NullBool   `json:"completed"`
}

func (q *Queries) GetTask(ctx context.Context, id int32) (GetTaskRow, error) {
	row := q.db.QueryRowContext(ctx, getTask, id)
	var i GetTaskRow
	err := row.Scan(
		&i.ID,
		&i.Title,
		&i.Description,
		&i.Completed,
	)
	return i, err
}

const getTasks = `-- name: GetTasks :many
SELECT id, title, description, completed FROM tasks
`

type GetTasksRow struct {
	ID          int32          `json:"id"`
	Title       string         `json:"title"`
	Description sql.NullString `json:"description"`
	Completed   sql.NullBool   `json:"completed"`
}

func (q *Queries) GetTasks(ctx context.Context) ([]GetTasksRow, error) {
	rows, err := q.db.QueryContext(ctx, getTasks)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []GetTasksRow
	for rows.Next() {
		var i GetTasksRow
		if err := rows.Scan(
			&i.ID,
			&i.Title,
			&i.Description,
			&i.Completed,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateTask = `-- name: UpdateTask :exec
UPDATE tasks SET title = $2, description = $3, completed = $4 WHERE id = $1
`

type UpdateTaskParams struct {
	ID          int32          `json:"id"`
	Title       string         `json:"title"`
	Description sql.NullString `json:"description"`
	Completed   sql.NullBool   `json:"completed"`
}

func (q *Queries) UpdateTask(ctx context.Context, arg UpdateTaskParams) error {
	_, err := q.db.ExecContext(ctx, updateTask,
		arg.ID,
		arg.Title,
		arg.Description,
		arg.Completed,
	)
	return err
}
